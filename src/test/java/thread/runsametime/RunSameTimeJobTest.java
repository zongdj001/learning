package thread.runsametime;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.CyclicBarrier;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;

public class RunSameTimeJobTest {
    @Test 
    public void testRunSameTimeByCountDownlatch() {
       CountDownLatch gater = new CountDownLatch(1);
       
       Thread job1 = new Thread(new CountdownlachRunSameTimeJob(gater), "countdown-1");
       Thread job2 = new Thread(new CountdownlachRunSameTimeJob(gater), "countdown-2");
       Thread job3 = new Thread(new CountdownlachRunSameTimeJob(gater), "countdown-3");
       
       job1.start();
       try {
           Thread.sleep(3000);
       } catch (InterruptedException e) {
           e.printStackTrace();
       }

       
       job2.start();
       job3.start();
       
       try {
           Thread.sleep(3000);
       } catch (InterruptedException e) {
           e.printStackTrace();
       }

       
       // all threads ready three threads can run 
       gater.countDown();
       
       
        try {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

    }
    
    @Test 
    public void testRunSameTimeByCyclicBarrier() {
       CyclicBarrier gater = new CyclicBarrier(3);
       
       Thread job1 = new Thread(new CyclicBarrierRunSameTimeJob(gater), "barrier-1");
       Thread job2 = new Thread(new CyclicBarrierRunSameTimeJob(gater), "barrier-2");
       Thread job3 = new Thread(new CyclicBarrierRunSameTimeJob(gater), "barrier-3");
       
       job1.start();
       try {
           Thread.sleep(3000);
       } catch (InterruptedException e) {
           e.printStackTrace();
       }

       
       job2.start();
       job3.start();
       
       try {
           Thread.sleep(3000);
       } catch (InterruptedException e) {
           e.printStackTrace();
       }
    }
}
